import os
from crewai import Agent, Task, Crew, Process
from crewai_tools import DuckDuckGoSearchRun

# --- Configura√ß√£o ---

# Configura a ferramenta de busca
# DuckDuckGo n√£o precisa de API Key
search_tool = DuckDuckGoSearchRun()

# Define o tema do v√≠deo aqui
inputs = {'query': 'Melhores jogos de 2020'}

# --- 1. Defini√ß√£o dos Agentes ---

# Agente: Roteirista de V√≠deo
roteirista = Agent(
  role='Roteirista de V√≠deo de Games',
  goal='Pesquisar e elaborar um roteiro detalhado e cativante para um v√≠deo no YouTube sobre {query}.',
  backstory=(
      "Voc√™ √© um especialista em cria√ß√£o de conte√∫do e storytelling para o YouTube, "
      "com foco profundo no nicho de games. Voc√™ sabe como prender a aten√ß√£o da "
      "audi√™ncia e estruturar um v√≠deo (Introdu√ß√£o, Desenvolvimento, Conclus√£o com CTA)."
  ),
  verbose=True,
  allow_delegation=False,
  tools=[search_tool] # Ferramenta de busca
)

# Agente: Criador de Thumbnail
designer = Agent(
  role='Designer Gr√°fico de Thumbnails para YouTube',
  goal='Criar 3 descri√ß√µes de thumbnails impactantes baseadas no roteiro do v√≠deo.',
  backstory=(
      "Voc√™ √© um designer gr√°fico especialista em thumbnails para YouTube. "
      "Seu trabalho √© analisar um roteiro e propor 3 conceitos visuais (descri√ß√µes) "
      "que sejam chamativos, representem o conte√∫do do v√≠deo e gerem cliques."
  ),
  verbose=True,
  allow_delegation=False
  # Este agente n√£o precisa de ferramentas, pois usa o roteiro (contexto)
)

# Agente: Revisor
revisor = Agent(
  role='Revisor e Estrategista de Conte√∫do',
  goal=(
      "Revisar o roteiro, analisar as 3 op√ß√µes de thumbnail, escolher a melhor, "
      "e compilar o pacote final (roteiro + thumbnails)."
  ),
  backstory=(
      "Voc√™ √© o editor-chefe. Sua fun√ß√£o √© garantir a qualidade final. "
      "Voc√™ revisa o roteiro para clareza e engajamento. "
      "Al√©m disso, voc√™ avalia as op√ß√µes de thumbnail e escolhe a mais estrat√©gica "
      "para o sucesso do v√≠deo."
  ),
  verbose=True,
  allow_delegation=False
)

# --- 2. Defini√ß√£o das Tarefas ---

# Tarefa 1: Escrever Roteiro
task_roteiro = Task(
  description=(
      "1. Pesquise informa√ß√µes relevantes sobre o tema: '{query}'.\n"
      "2. Elabore um roteiro de v√≠deo completo (aprox. 8-10 minutos) para o YouTube.\n"
      "3. Estruture o roteiro com: Introdu√ß√£o (gancho), Desenvolvimento (lista/an√°lise dos jogos), "
      "e Conclus√£o (resumo e Call-to-Action, ex: 'Comente seu jogo favorito de 2020')."
  ),
  expected_output='Um documento de texto formatado contendo o roteiro completo do v√≠deo.',
  agent=roteirista
)

# Tarefa 2: Criar Descri√ß√µes de Thumbnails
task_thumbnail = Task(
  description=(
      "Usando o roteiro fornecido, crie 3 descri√ß√µes detalhadas para thumbnails. "
      "Cada descri√ß√£o deve ser um 'prompt' para um designer (ou IA de imagem), "
      "incluindo elementos visuais, textos curtos (max. 4 palavras), e estilo (cores, etc)."
  ),
  expected_output='Uma lista contendo 3 descri√ß√µes (prompts) de thumbnail.',
  agent=designer,
  context=[task_roteiro] # Depende do roteiro
)

# Tarefa 3: Revisar e Compilar
task_revisao = Task(
  description=(
      "1. Revise o roteiro final para garantir clareza, coes√£o e engajamento.\n"
      "2. Analise as 3 descri√ß√µes de thumbnail fornecidas.\n"
      "3. Escolha a melhor thumbnail (Op√ß√£o 1, 2 ou 3) e justifique brevemente sua escolha.\n"
      "4. Compile o relat√≥rio final."
  ),
  expected_output=(
      "Um relat√≥rio final contendo:\n"
      "1. O Roteiro Revisado.\n"
      "2. As 3 Descri√ß√µes de Thumbnail.\n"
      "3. A Recomenda√ß√£o da Melhor Thumbnail (com justificativa)."
  ),
  agent=revisor,
  context=[task_roteiro, task_thumbnail] # Depende de ambas
)

# --- 3. Execu√ß√£o da Crew ---

# Monta a 'Crew' (equipe)
crew = Crew(
  agents=[roteirista, designer, revisor],
  tasks=[task_roteiro, task_thumbnail, task_revisao],
  process=Process.sequential # Tarefas executadas em ordem
)

# Inicia o trabalho
print(f"üöÄ Iniciando a Crew para o tema: {inputs['query']}")
result = crew.kickoff(inputs=inputs)

print("\n\n##################################################")
print("üèÅ Resultado Final da Crew:")
print(result)
